import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.agentes.agentePolicia.objetivos.*;
import icaro.aplicaciones.agentes.agentePolicia.tareas.*;
import icaro.aplicaciones.Robocop.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;
import icaro.infraestructura.entidadesBasicas.comunicacion.*;

import java.util.ArrayList;
import java.lang.String;


global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//-------------------------------------------------------------------//
//  Primera regla que se ejecutara. Solo se debe disparar una vez    //
//-------------------------------------------------------------------//
rule "Acciones Iniciales Prueba Cambio Rol "
 when
	not ( exists(Focus()))
 then
	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarPolicia.class);
	tarea.ejecutar( );   
	System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end

rule "Acciones Iniciales Objetivo "
 when
	focoActual : Focus(foco == null)
	not ( exists(Objetivo()))
 then
	Objetivo ob = new EnviarCoordenadas();
    insert(ob);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

//-------------------------------------------------------------------//
//             Notificar Posicion al Conocer la Comisaria            //
//-------------------------------------------------------------------//
rule "Regla de focalizacion Enviar Coordenadas"
 when
    obj:EnviarCoordenadas(state==Objetivo.PENDING)
    f:Focus(foco == null)
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

rule "Regla de resolucion de Enviar Coordenadas"
 when
    obj:EnviarCoordenadas(state==Objetivo.PENDING)
    f:Focus(foco==obj)
    exists(InfoEquipo())
    mensajeObj:InfoEquipo()
    ePolicia:EstadoPolicia()
 then
    obj.setState(Objetivo.SOLVING);
    update(obj);
 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(InformarDePosicion.class);
 	tarea.ejecutar(mensajeObj, ePolicia);
 	
 	obj.setState(Objetivo.REFINED); //SOLVED
    update(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de finalizacion de Enviar Coordenadas"
 when
    obj:EnviarCoordenadas(state==Objetivo.SOLVED)
    f:Focus(foco==obj)
 then
 	f.setFoco(null);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId,"Nuevo Foco : " + f.getFoco());
    retract(obj);
    update(f);
end

