import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.InformeDeTarea;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.aplicaciones.Robocop.*;
import icaro.aplicaciones.agentes.agenteComisaria.objetivos.*;
import icaro.aplicaciones.agentes.agenteComisaria.tareas.*;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.Objetivo;

import java.util.ArrayList;
import java.lang.String;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;

//-------------------------------------------------------------------//
//  Primera regla que se ejecutara. Solo se debe disparar una vez    //
//-------------------------------------------------------------------//
rule "Acciones Iniciales Prueba Cambio Rol "
 when
	not ( exists(Focus()))
 then
	TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(InicializarComisaria.class);
	tarea2.ejecutar( );   
	System.out.println( "\n"+agentId +"EJECUTO LA REGLA Acciones Iniciales\n\n" ); 
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," :REGLA " + drools.getRule().getName());
end

rule "Acciones Iniciales Objetivo "
 when
	focoActual : Focus(foco == null)
	not ( exists(Objetivo()))
 then
	Objetivo ob = new DefinirMiEquipo();
    insert(ob);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

//-------------------------------------------------------------------//
//                          DEFINIR EQUIPO                           //
//-------------------------------------------------------------------//
rule "Regla de focalizacion de FormarEquipo"
 when
    obj:DefinirMiEquipo(state==Objetivo.PENDING)
    f:Focus(foco == null)
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

rule "Regla de resolucion de FormarEquipo"
 when
    obj:DefinirMiEquipo(state==Objetivo.PENDING)
    f:Focus(foco==obj)
    eComisaria:EstadoComisaria()
    not( exists ( InfoEquipo(inicioContactoConEquipo == false)  ))
 then
    obj.setState(Objetivo.SOLVING);
    update(obj);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(FormarEquipo.class);
 	tarea.ejecutar(eComisaria);  
 	
 	obj.setState(Objetivo.SOLVED); 
    update(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de finalizacion de FormarEquipo"
 when
    obj:DefinirMiEquipo(state==Objetivo.SOLVED)
    f:Focus(foco==obj)
 then
    retract(obj);
    Objetivo ob = new EnviarLugarDelRobo();
    insert(ob);
    f.setFoco(null);
    update(f);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

//-------------------------------------------------------------------//
//                      ENVIAR AL LUGAR DEL ROBO                     //
//-------------------------------------------------------------------//
rule "Regla de focalizacion de EnviarLugarDelRobo"
 when
    obj:EnviarLugarDelRobo(state==Objetivo.PENDING)
    f:Focus(foco == null)
 then
    f.setFoco(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    update(f);
end

rule "Regla de resolucion de EnviarLugarDelRobo -> ObtenerCoordenadas"
 when
    obj:EnviarLugarDelRobo(state==Objetivo.PENDING)
    f:Focus(foco==obj)
    c:Coordenada()
    eComisaria:EstadoComisaria(puedoEvaluarCaminos==false)
 then
    obj.setState(Objetivo.SOLVING);
    update(obj);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(ObtenerCoordenadas.class);
 	tarea.ejecutar(c, eComisaria, obj);  

    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Regla de resolucion de EnviarLugarDelRobo -> EvaluarCamino"
 when
    obj:EnviarLugarDelRobo(state==Objetivo.PENDING)
    f:Focus(foco==obj)
    eComisaria:EstadoComisaria(puedoEvaluarCaminos==true)
 then
    obj.setState(Objetivo.SOLVING);
    update(obj);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(InformarPoliciaMasCercano.class);
 	tarea.ejecutar(eComisaria);  
 	
 	obj.setState(Objetivo.SOLVED);
    update(obj);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

/*
rule "Regla de finalizacion de EnviarLugarDelRobo"
 when
    obj:EnviarLugarDelRobo(state==Objetivo.SOLVED)
    f:Focus(foco==obj)
 then
    retract(obj);
    f.setFoco(null);
    update(f);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end
*/
